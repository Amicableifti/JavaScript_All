/*
Problem 01 
ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗ ржорж┐ рж░ржкрзБрж░ ржЪрж┐ ржбрж╝рж┐ ржпрж╝рж╛ржЦрж╛ржирж╛рж░ ржорзНржпрж╛ржирзЗ ржЬрж╛рж░ ред ржкрзНрж░рждрж┐ ржжрж┐ ржи рждрж╛ржХрзЗ ржЕрж╕ржВржЦрзНржп ржЯрж┐ ржХрзЗ ржЯ ржмрж┐ ржХрзНрж░рж┐ ржХрж░рждрзЗ рж╣ржпрж╝ ред ржЯрж╛ржХрж╛рж░ рж╣рж┐ рж╕рзЗ ржм ржП
рждрж┐ ржирж┐ рж╕ржмрж╕ржоржпрж╝ ржЧржбрж╝ржорж┐ рж▓ ржмрж╛ржзрж┐ ржпрж╝рзЗ ржлрзЗ рж▓рзЗ ржи ред рждрзБржорж┐ ржпрзЗ рж╣рзЗ рждрзБрж╕ржжрзНржп ржбрзЗ ржнрзЗ рж▓ рзЛржкрж╛рж░ рж╣ржЪрзНржЫ рзЛ ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗ ржд рзЛржорж╛рж░ ржХрж╛ржЫрзЗ ржПржХржЯрж┐
рж╣рзЗ рж▓рзНржк ржЪрзЗ ржпрж╝рзЗ ржЫрзЗ ред ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗ ржХрзЗ calculateMoney( ) ржирж╛ржорзЗ ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи ржмрж╛ржирж┐ ржпрж╝рзЗ ржжрж┐ рждрзЗ рж╣ржмрзЗ ржпрж╛ржХрзЗ ржкрзНрж░рждрж┐ ржжрж┐ ржи
ржЯрж┐ ржХрзЗ ржЯ рж╕рзЗ рж▓ ржХрж░рж╛рж░ рж╕ржВржЦрзНржпрж╛ ржЗржиржкрзБржЯ ржжрж┐ рж▓рзЗ рж╕рзЗ рж╕ржХрж▓ ржЦрж░ржЪ ржмрж╛ржж ржжрж┐ ржпрж╝рзЗ ржо рзЛржЯ ржХржд ржЯрж╛ржХрж╛ ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗрж░ ржХрж╛ржЫрзЗ ржерж╛ржХрзЗ рждрж╛ ржмрж▓рзЗ
ржжрж┐ рждрзЗ ржкрж╛рж░рзЗ ред
ржЪрж┐ ржбрж╝рж┐ ржпрж╝рж╛ржЦрж╛ржирж╛ржпрж╝ ржкрзНрж░рждрж┐ ржЯрж┐ ржХрзЗ ржЯ ржмрж┐ ржХрзНрж░рж┐ рж╣ржпрж╝ рззрзирзж ржЯрж╛ржХрж╛ржпрж╝ ред ржЖрж░ ржмрзНржпржпрж╝ ржПрж░ ржоржзрзНржпрзЗ ржкрзНрж░рждрж┐ ржжрж┐ ржи рзз ржЬржи ржжрж╛рж░ рзЛржпрж╝рж╛ржи ржХрзЗ ржжрж┐ рждрзЗ рж╣ржпрж╝ рзлрзжрзж
ржЯрж╛ржХрж╛ ржПржмржВ рзо ржЬржи рж╕рзНржЯрж╛ржл ржХрзЗ рж▓рж╛ржЮрзНржЪ ржХрж░рж╛ржи рзЛрж░ ржЬржирзНржпрзЗ ржЦрж░ржЪ рж╣ржпрж╝ ржЬржиржкрзНрж░рждрж┐ рзлрзж ржЯрж╛ржХрж╛ ржХрж░рзЗ ред
Input :
ржлрж╛ржВрж╢ржи ржЯрж┐ ржЗржиржкрзБржЯ ржирзЗ ржмрзЗ ржЯрж┐ ржХрзЗ ржЯ рж╕рзЗ рж▓ ржХрж░рж╛рж░ рж╕ржВржЦрзНржпрж╛ ред ржЗржиржкрзБржЯ рж╣ржмрзЗ ржПржХржЯрж┐ ржкржЬрж┐ ржЯрж┐ ржн рж╕ржВржЦрзНржпрж╛ ред (0<=Input)
Output :
ржЯрж┐ ржХрзЗ ржЯрзЗ рж░ ржЖржпрж╝ ржУ ржмрзНржпржпрж╝ ржЧрзБрж▓ рзЛ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗ ржЯ ржХрж░рзЗ ржмрж╛ржХрзА ржХржд ржЯрж╛ржХрж╛ ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗрж░ ржХрж╛ржЫрзЗ ржерж╛ржХрж▓ рзЛ рж╕рзЗ ржЯрж╛ ржЗ ржд рзЛржорж╛рж░
ржлрж╛ржВрж╢ржи ржЖржЙржЯржкрзБржЯ рж╣рж┐ рж╕рзЗ ржмрзЗ рж░рж┐ ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ ред ржЖржЙржЯржкрзБржЯ ржкржЬрж┐ ржЯрж┐ ржн ржирзЗ ржЧрзЗ ржЯрж┐ ржн ржпрзЗ ржХ рзЛржи ржХрж┐ ржЫрзБржЗ рж╣рждрзЗ ржкрж╛рж░рзЗ ред
ЁЯТбржпрзЗ ржоржи ржЗржиржкрзБржЯ ржпржжрж┐ 10 рж╣ржпрж╝ рждрж╛рж╣рж▓рзЗ ржЖржЙржЯржкрзБржЯ рж╣ржмрзЗ ( 10 * 120) - ( 500 + (8 * 50) ) = 300
Challenge ЁЯУв : ржмрж╛ржХрзЗ рж░ ржнрж╛ржЗ ржпржжрж┐ ржЗржиржкрзБржЯ рж╣рж┐ рж╕рзЗ ржмрзЗ ржирзЗ ржЧрзЗ ржЯрж┐ ржн рж╕ржВржЦрзНржпрж╛ ржжрзЗ ржпрж╝ рждрж╛рж╣рж▓рзЗ ржд рзЛржорж╛ржХрзЗ ржПржХржЯрж╛ error ржорзНржпрж╛рж╕рзЗ ржЬ
ржЖржЙржЯржкрзБржЯ рж╣рж┐ рж╕рзЗ ржмрзЗ рж░рж┐ ржЯрж╛рж░рзНржи ржХрж░рзЗ ржжрж┐ рждрзЗ рж╣ржмрзЗ ред
*/

/*

function calculateMoney(ticket){
 //Error validation and Return error message
 if(ticket<0)
 {
    return " Invalid Number" ;
 }
 let remaningMoney = 0;
 const ticketPrice = 120;
 const fixedCost = 500;
 const staffNumber = 8;
 const perstaffLunchCost = 50;
//  Total Remaning Money
remaningMoney = (ticket*ticketPrice) - (fixedCost+(staffNumber*perstaffLunchCost)) ;
 return remaningMoney ;
}

*/

/*
console.log(calculateMoney(10)); 
console.log(calculateMoney(1055));
console.log(calculateMoney(93));
console.log(calculateMoney(-130)); 
*/

// Output

/*
300
1257000
10260
Invalid Number
 */

//PROBLEM 02

/*
рж╕рж╛рж▓ржорж╛ржи ржнрж╛ржЗ ржУ рж░рж╛рж╢рзЗ ржжрж╛ ржнрж╛ржмрзАрж░ ржХ рзЛрж▓ ржЬрзБржбрж╝рзЗ ржПрж╕рзЗ ржЫрзЗ ржПржХржЯрж╛ ржкрзБрждрзНрж░ рж╕ржирзНрждрж╛ржи ред рж╕рж╛рж▓ржорж╛ржи ржнрж╛ржЗ ржкрзБрждрзНрж░ рж╕ржирзНрждрж╛ржирзЗ рж░ ржПржХржЯрж╛ ржнрж╛рж▓ рзЛ ржирж╛ржо
рж░рж╛ржЦрждрзЗ ржЪрж╛ржи ред ржХрж┐ ржирзНрждрзБ рждрж╛ржжрзЗ рж░ ржПрж▓рж╛ржХрж╛ржпрж╝ ржЧрзНрж░рж╛ржорзЗ рж░ ржорж╛ржирж╖рзБ рж░рж╛ ржирж╛ржо ржХрзЗ ржмрзНржпрж╛ржВржЧ ржХрж░рзЗ ржЙржЪрзНржЪрж╛рж░ржи ржХрж░рзЗ ред ржпрзЗ ржоржи ржХрж╛рж░ рзЛ ржирж╛ржо salman
рж╣рж▓рзЗ рждрж╛рж░рж╛ ржмрж▓рзЗ рж╕рж╛рж▓ржорж╛ржЗржирзНржпрж╛ ред ржХрж╛рж░ рзЛ ржирж╛ржо jafor рж╣рж▓рзЗ рждрж╛рж░рж╛ ржмрж▓рзЗ ржЬрж╛ржлржЗрж░рзНржпрж╛ ред рж╕рж╛рж▓ржорж╛ржи ржнрж╛ржЗ ржЪрж╛ржи ржирж╛ рждрж╛рж░ ржкрзБрждрзНрж░ рж╕ржирзНрждрж╛ржи ржХрзЗ
ржХрзЗ ржЙ ржПржнрж╛ржмрзЗ ржХрзНрж╖рзЗ ржкрж╛ржХ ред
рж╕рж╛рж▓ржорж╛ржи ржнрж╛ржЗ ржжрзЗ ржЦрждрзЗ ржкрзЗ рж▓рзЗ ржи ржпрзЗ ржпрж╛ржжрзЗ рж░ ржирж╛ржорзЗ рж░ рж╢рзЗ рж╖рзЗ A, y, i , e , o , u, w ржерж╛ржХрзЗ рждрж╛ржжрзЗ рж░ ржХрзЗ ржЖрж╕рж▓рзЗ ржХрзНрж╖рзЗ ржкрж╛ржи рзЛ
ржпрж╛ржпрж╝ ржирж╛ ред ржпржоржи Tonoy, utsho , Roide, shanto ржПрж╕ржм ржзрж░ржирзЗ рж░ ржирж╛ржо ржЧрзБрж▓ рзЛ ржХрзЗ ржмрзНржпрж╛ржВржЧ ржХрж░рзЗ ржЙржЪрзНржЪрж╛рж░ржи ржХрж░рж╛ ржпрж╛ржпрж╝ ржирж╛ ред

ржПржЦржи ржд рзЛржорж╛ржХрзЗ рж╕рж╛рж▓ржорж╛ржи ржнрж╛ржЗрж░ ржЬржирзНржп checkName() ржирж╛ржорзЗ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи рж▓рж┐ ржЦрзЗ ржжрж┐ рждрзЗ рж╣ржмрзЗ ред ржпрзЗ ржЯрж╛ ржПржХржЯрж╛ рж╕рзНржЯрзНрж░рж┐ ржВ
ржЗржиржкрзБржЯ ржирзЗ ржмрзЗ ред ржПржмржВ ржлрж╛ржВрж╢ржи ржЯрж┐ ржЪрзЗ ржХ ржХрж░рзЗ ржжрзЗ ржЦржмрзЗ ржирж╛ржо ржЯрж┐ рж░рж╛ржЦрж╛ ржнрж╛рж▓ рзЛ рж╣ржмрзЗ ржирж╛ ржЦрж╛рж░рж╛ржк рж╣ржмрзЗ ред ржнрж╛рж▓ рзЛ рж╣рж▓рзЗ рж╕рзЗ рж░рж┐ ржЯрж╛рж░рзНржи
ржХрж░ржмрзЗ тАЬGood NameтАЭ ржЖрж░ ржирж╛ржо ржЯрж┐ ржЦрж╛рж░рж╛ржк рж╣рж▓рзЗ рж░рж┐ ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ тАЬBad NameтАЭ

Input : ржд рзЛржорж╛рж░ ржлрж╛ржВрж╢ржи ржЯрж┐ ржЗржиржкрзБржЯ ржирзЗ ржмрзЗ ржПржХржЯрж┐ ржирж╛ржо ред ржЗржиржкрзБржЯ ржЯрж┐ рж╣ржмрзЗ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ ржВ ред ржпрзЗ ржЦрж╛ржирзЗ character ржЧрзБрж▓ рзЛ
ржЫ рзЛржЯ рж╣рж╛рждрзЗ рж░ ржмрж╛ ржмржбрж╝ рж╣рж╛рждрзЗ рж░ рж╣рждрзЗ ржкрж╛рж░рзЗ ред

Output : ржлрж╛ржВрж╢ржи ржЯрж┐ ржЖржЙржЯржкрзБржЯ рж╣рж┐ рж╕рзЗ ржмрзЗ рж░рж┐ ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ ржВ ред ржпрж╛рж░ ржнрзНржпрж╛рж▓рзБрж╣ржмрзЗ тАЬGood NameтАЭ ржЕржержмрж╛
тАЬBad NameтАЭ
*/
/*
function checkName(name) {
    // Invalid Check
    if (typeof name !== 'string' || Array.isArray(name)) {
        return "invalid";
    }
    else {
        //make all lowercase
        let data = name.toLowerCase();
        // Find last character
        let lastChar = data.charAt(data.length - 1);
        // check last character
        if (lastChar === 'a' || lastChar === 'y' || lastChar === 'i' || lastChar === 'e' || lastChar === 'o' || lastChar === 'u' || lastChar === 'w') {
            return "Bad Name";
        }
        else {
            return "Good Name";
        }
    }
}

console.log(checkName('Salman'));
console.log(checkName('RAFEE'));
console.log(checkName('199n'));
console.log(checkName(8));
console.log(checkName(['Rashed',true]));
*/

/*
// Problem 03 

function deleteInvalids(arr) {

    if (!Array.isArray(arr)) {
        return "invalid";
    }
    else {
    var data = arr.filter(Number.isInteger);
    return data ;
    }

}
console.log(deleteInvalids( [1 , null, undefined, 18, -19, NaN, "12", [1, 2], { ob: "lala" }] ));
console.log(deleteInvalids( [ "1" , {num:2} , NaN] ));
console.log(deleteInvalids([ 1 , 2 , -3 ]));
console.log(deleteInvalids({ num: [1, 2, 3] })); */

// Problem 04

/*

*/
/*
function password(obj) {
    
    if (obj.name == "null" || obj.birthYear == "null"  || obj.siteName == "null" || Object.keys(obj).length  !== 3) {

        return 'invalid';
    }
    let value = obj.birthYear;
    value = value.toString();
    // return typeof value , value.length;
    if (value.length !== 4) {

        return 'invalid';
    }
    else {
        
        let output = obj.siteName + '#' + obj.name + '@' + obj.birthYear;
        output.charAt(0).toUpperCase() + output.slice(1);
        output = output [0].toUpperCase() + output . slice(1);
        
        return output;
    }
}
console.log(password({ name: 'kolimuddin' , birthYear: 1999 , siteName: 'google'}));
console.log(password({ name: 'rahat', birthYear: 2002, siteName: 'Facebook' }));
console.log(password({ name: 'toky', birthYear: 200, siteName: 'facebook' }));
console.log(password({ name: 'maisha', birthYear: 2002 }));
*/

// FIVE

function monthlySavings(arr, number) {

    // console.log(arr,number)
    if (typeof number !== "number") {
        return 'invalid input';
    }
    else {
        let saving = 0;
        let livingCost = number;
        let totalAmout = 0;
        for (let items of arr) {
            // console.log(arr,items);
            if(items >= 3000 ){
                let payment = items*.2 
                items = items - payment
            }
            totalAmout = totalAmout + items;
            
        }
        // console.log(totalAmout , livingCost);
        if( totalAmout === livingCost )
        {
            return totalAmout-livingCost;
        }
        if( totalAmout > livingCost )
        {
            return totalAmout-livingCost;
        }
        else {
            return "earn more"
        }

    }
    return 'earn more';
}
// console.log(monthlySavings([ 1000 , 2000 , 3000 ] , 5400));
// console.log(monthlySavings([ 1000 , 2000 , 2500 ] , 5000));
// console.log(monthlySavings([900, 2700, 3400], 10000));
// console.log(monthlySavings("100", [ 900 , 2700 , 3400]));

